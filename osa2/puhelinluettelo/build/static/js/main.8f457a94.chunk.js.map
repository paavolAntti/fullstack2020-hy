{"version":3,"sources":["components/Filter.js","services/persons.js","components/Info.js","components/Numbers.js","components/InfoForm.js","components/Notification.js","App.js","serviceWorker.js","index.js"],"names":["Filter","filter","handler","value","onChange","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","Info","info","setPersons","persons","setNotification","style","name","number","onClick","window","confirm","console","log","_id","contactService","copy","person","setTimeout","Numbers","contacts","map","key","InfoForm","props","onSubmit","addName","newName","nameHandler","newNumber","numberHandler","type","Notification","message","className","App","useState","setNewName","setNewNumber","newFilter","setNewFilter","notification","setStyle","useEffect","initialContacts","filteredContacts","toLowerCase","includes","event","target","preventDefault","names","contact","find","changedContact","returnedContact","catch","error","p","concat","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oQAUiBA,EARF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,QACrB,OACE,mDAAwB,2BAAOC,MAAOF,EAChCG,SAAUF,M,gBCHhBG,EAAU,cAuBD,EArBA,WAEX,OADgBC,IAAMC,IAAIF,GACXG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAmB9B,EAhBA,SAACC,GAEZ,OADgBL,IAAMM,KAAKP,EAASM,GACrBH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAc9B,EAXA,SAACG,EAAIF,GAEhB,OADgBL,IAAMQ,IAAN,UAAaT,EAAb,YAAwBQ,GAAMF,GAC/BH,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAS9B,EANA,SAACG,GAEZ,OADgBP,IAAMS,OAAN,UAAgBV,EAAhB,YAA2BQ,IAC5BL,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCU5BM,EA7BJ,SAAC,GAAyD,IAAxDC,EAAuD,EAAvDA,KAAMC,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,MAqBvD,OACE,6BACGJ,EAAKK,KADR,IACeL,EAAKM,OAClB,4BAAQC,QAtBO,WACfC,OAAOC,QAAP,iBAAyBT,EAAKK,KAA9B,QACNK,QAAQC,IAAI,iBAAkBX,EAAKY,KACnCC,EACgBb,EAAKY,KACZrB,MAAK,WACJ,IAAMuB,EAAOZ,EAAQlB,QAAO,SAAA+B,GAAM,OAAIA,IAAWf,KACjDU,QAAQC,IAAI,oBAAqBT,GACjCQ,QAAQC,IAAI,mBAAoBG,GAChCb,EAAWa,GACXV,EAAM,WACND,EAAgB,GAAD,OAAIH,EAAKK,KAAT,aACfW,YAAW,WACXb,EAAgB,QACb,WAQP,YCFOc,EArBC,SAAC,GAA6D,IAA5DC,EAA2D,EAA3DA,SAAUjB,EAAiD,EAAjDA,WAAYC,EAAqC,EAArCA,QAASC,EAA4B,EAA5BA,gBAAiBC,EAAW,EAAXA,MAc9D,OACI,6BAZmBc,EAASC,KAAI,SAAAnB,GAAI,OACpC,kBAAC,EAAD,CACIoB,IAAKpB,EAAKK,KACVL,KAAMA,EACNC,WAAYA,EACZC,QAASA,EACTC,gBAAiBA,EACjBC,MAAOA,SCOFiB,EAlBA,SAACC,GACd,OACE,0BAAMC,SAAUD,EAAME,SAClB,sCACQ,2BAAOtC,MAAOoC,EAAMG,QAC1BtC,SAAUmC,EAAMI,eAElB,wCACU,2BAAOxC,MAAOoC,EAAMK,UAC5BxC,SAAUmC,EAAMM,iBAElB,6BACE,4BAAQC,KAAK,UAAb,UCCGC,G,MAZM,SAAC,GAAsB,IAArBC,EAAoB,EAApBA,QAAS3B,EAAW,EAAXA,MAC5B,OAAgB,OAAZ2B,EACO,KAIP,yBAAKC,UAAW5B,GACX2B,KC8HEE,EA/HH,WAAO,IAAD,EACgBC,mBAAS,IADzB,mBACRhC,EADQ,KACCD,EADD,OAEgBiC,mBAAS,IAFzB,mBAERT,EAFQ,KAECU,EAFD,OAGoBD,mBAAS,IAH7B,mBAGRP,EAHQ,KAGGS,EAHH,OAIoBF,mBAAS,IAJ7B,mBAIRG,EAJQ,KAIGC,EAJH,OAK0BJ,mBAAS,MALnC,mBAKRK,EALQ,KAKMpC,EALN,OAMW+B,mBAAS,WANpB,mBAMR9B,EANQ,KAMDoC,EANC,KAQhBC,qBAAU,WACR5B,IAEGtB,MAAK,SAAAmD,GACJzC,EAAWyC,QAEd,IAEH,IA8EMC,EAAkC,KAAdN,EACtBnC,EACAA,EAAQlB,QAAO,SAAAgB,GAAI,OACnBA,EAAKK,KAAKuC,cAAcC,SAASR,EAAUO,gBACxC5C,EAAKM,OAAOuC,SAASR,MAE5B,OACE,6BACE,yCACA,kBAAC,EAAD,CAAcN,QAASQ,EAAcnC,MAAOA,IAC5C,kBAAC,EAAD,CAAQpB,OAAQqD,EAAWpD,QAfJ,SAAC6D,GAC1BpC,QAAQC,IAAI,qBAAsBmC,EAAMC,OAAO7D,OAC/CoD,EAAaQ,EAAMC,OAAO7D,UAcxB,uCACA,kBAAC,EAAD,CACEsC,QA3FU,SAACsB,GACfA,EAAME,iBAEN,IAAMC,EAAQ/C,EAAQiB,KAAI,SAAAJ,GAAM,OAAIA,EAAOV,QAE3C,GADAK,QAAQC,IAAIsC,GACPA,EAAMJ,SAASpB,IA6BlB,GAAIjB,OAAOC,QAAP,UAAkBgB,EAAlB,gFAC0C,CAC5C,IAAMyB,EAAUhD,EAAQiD,MAAK,SAAApC,GAAM,OAAIA,EAAOV,OAASoB,KACjD2B,EAAc,eAAOF,EAAP,CAAgB5C,OAAQqB,IAC5CjB,QAAQC,IAAIyC,GACZvC,EACUqC,EAAQtC,IAAKwC,GACpB7D,MAAK,SAAA8D,GACJpD,EAAWC,EAAQiB,KAAI,SAAAJ,GAAM,OAAIA,EAAOH,MAAQsC,EAAQtC,IAAMG,EAASsC,MACvE3C,QAAQC,IAAIT,GACZsC,EAAS,WACTrC,EAAgB,GAAD,OAAIsB,EAAJ,gCAAmC2B,EAAe9C,SACjEU,YAAW,WACXb,EAAgB,QACb,QAEJmD,OAAM,SAAAC,GACLf,EAAS,SACTrC,EAAgB,GAAD,OAAIsB,EAAJ,iDAAoD2B,EAAe9C,SAClFU,YAAW,WACXb,EAAgB,QACb,KACHF,EAAWC,EAAQlB,QAAO,SAAAwE,GAAC,OAAIA,EAAE5C,MAAQsC,EAAQtC,iBA9CvDC,EAJoB,CAClBR,KAAMoB,EACNnB,OAAQqB,IAITpC,MAAK,SAAA8D,GACJ3C,QAAQC,IAAI0C,GACZpD,EAAWC,EAAQuD,OAAOJ,IAC1BlB,EAAW,IACXC,EAAa,IACbjC,EAAgB,GAAD,OAAIsB,EAAJ,wBACfT,YAAW,WACTb,EAAgB,QACf,QAEJmD,OAAM,SAAAC,GACL7C,QAAQC,IAAI4C,EAAM/D,SAASC,MAC3B+C,EAAS,SACTL,EAAW,IACXC,EAAa,IACbjC,EAAgBoD,EAAM/D,SAASC,KAAK8D,OACpCvC,YAAW,WACTb,EAAgB,QACf,SA8DHsB,QAASA,EACTE,UAAWA,EACXD,YA/BmB,SAACoB,GACxBpC,QAAQC,IAAI,qBAAsBmC,EAAMC,OAAO7D,OAC/CiD,EAAWW,EAAMC,OAAO7D,QA8BpB0C,cA3BqB,SAACkB,GAC1BpC,QAAQC,IAAI,qBAAsBmC,EAAMC,OAAO7D,OAC/CkD,EAAaU,EAAMC,OAAO7D,UA2BxB,uCACA,kBAAC,EAAD,CACEgC,SAAUyB,EACV1C,WAAYA,EACZC,QAASA,EACTC,gBAAiBA,EACjBC,MAAOoC,MCpHKkB,QACW,cAA7BlD,OAAOmD,SAASC,UAEe,UAA7BpD,OAAOmD,SAASC,UAEhBpD,OAAOmD,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7E,MAAK,SAAA8E,GACjCA,EAAaC,kB","file":"static/js/main.8f457a94.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = ({filter, handler}) => {\n    return (\n      <div>filter shown with: <input value={filter}\n            onChange={handler}/>\n      </div>\n    )\n  }\n\n  export default Filter","import axios from 'axios'\n\nconst baseUrl = 'api/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = (newObject) => {\n    const request = axios.post(baseUrl, newObject)\n    return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\n    return request.then(response => response.data)\n}\n\nconst remove = (id) => {\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => response.data)\n    \n}\n\nexport default {\n    getAll: getAll,\n    create: create,\n    update: update,\n    remove: remove\n}","import React from 'react'\nimport contactService from '../services/persons'\nconst Info = ({info, setPersons, persons, setNotification, style}) => {\n\n  const handleRemove = () => {\n    if (window.confirm(`Delete ${info.name}?`)) {\n\t\tconsole.log('id to remove: ', info._id)\n\t\tcontactService\n          .remove(info._id) \n          .then(() => {\n            const copy = persons.filter(person => person !== info)\n            console.log('before deleting: ', persons)\n            console.log('after deleting: ', copy)\n            setPersons(copy)\n            style('success')\n            setNotification(`${info.name} deleted`)\n            setTimeout(() => {\n            setNotification(null)\n            }, 5000)\n          }) \n    }\n  }\n\n    return (\n      <div>\n        {info.name} {info.number} \n        <button onClick={handleRemove}>delete</button>\n      </div>\n    )\n  }\n\n  export default Info","import React from 'react'\nimport Info from './Info'\n\nconst Numbers = ({contacts, setPersons, persons, setNotification, style}) => {\n\n    \n    const listInfo = () => contacts.map(info =>\n        <Info\n            key={info.name}\n            info={info}\n            setPersons={setPersons}\n            persons={persons}\n            setNotification={setNotification}\n            style={style}\n        />\n        )\n    \n    return (\n        <div>{listInfo()}</div>\n    )\n    \n    \n}\n\nexport default Numbers","import React from 'react'\n\nconst InfoForm = (props) => {\n    return (\n      <form onSubmit={props.addName}>\n          <div>\n            name: <input value={props.newName}\n            onChange={props.nameHandler} />\n          </div>\n          <div>\n            number: <input value={props.newNumber}\n            onChange={props.numberHandler} />\n          </div>\n          <div>\n            <button type=\"submit\">add</button>\n          </div>\n        </form>\n    )\n  }\n\n  export default InfoForm","import React from 'react'\nimport '../styles/Style.css'\n\nconst Notification = ({message, style}) => {\n    if (message === null) {\n        return null\n    }\n\n    return (\n        <div className={style}>\n            {message}\n        </div>\n    )\n}\n\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport Filter from './components/Filter'\nimport Numbers from './components/Numbers'\nimport InfoForm from './components/InfoForm'\nimport Notification from './components/Notification'\nimport contactService from './services/persons'\n\n\n\nconst App = () => {\n  const [ persons, setPersons ] = useState([])\n  const [ newName, setNewName ] = useState('')\n  const [ newNumber, setNewNumber ] = useState('')\n  const [ newFilter, setNewFilter ] = useState('')\n  const [ notification, setNotification ] = useState(null)\n  const [ style, setStyle] = useState('success')\n\n  useEffect(() => {\n    contactService\n      .getAll()\n      .then(initialContacts => {\n        setPersons(initialContacts)\n      })\n  }, [])\n\n  const addName = (event) => {\n    event.preventDefault()\n    // luodaan yhteystietoja vastaava olio\n    const names = persons.map(person => person.name)\n    console.log(names)\n    if (!names.includes(newName)) {\n      const contactInfo = {\n        name: newName,\n        number: newNumber,\n      }\n      contactService\n      .create(contactInfo)\n      .then(returnedContact => {\n        console.log(returnedContact)\n        setPersons(persons.concat(returnedContact))\n        setNewName('')\n        setNewNumber('')\n        setNotification(`${newName} added to phonebook`)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      })\n      .catch(error => {\n        console.log(error.response.data)\n        setStyle('error')\n        setNewName('')\n        setNewNumber('')\n        setNotification(error.response.data.error)\n        setTimeout(() => {\n          setNotification(null)\n        }, 5000)\n      })\n    }\n    else {\n      if (window.confirm(`${newName} is already in phonebook,\n          replace the old number with a new one?`)) {\n        const contact = persons.find(person => person.name === newName)\n        const changedContact = {...contact, number: newNumber}\n        console.log(changedContact)\n        contactService\n          .update(contact._id, changedContact)\n          .then(returnedContact => {\n            setPersons(persons.map(person => person._id !== contact._id ? person : returnedContact))\n            console.log(persons)\n            setStyle('success')\n            setNotification(`${newName}'s number changed to ${changedContact.number}`)\n            setTimeout(() => {\n            setNotification(null)\n            }, 5000)\n          })\n          .catch(error => {\n            setStyle('error')\n            setNotification(`${newName} has already been deleted from server ${changedContact.number}`)\n            setTimeout(() => {\n            setNotification(null)\n            }, 5000)\n            setPersons(persons.filter(p => p._id !== contact._id))\n          })\n      }\n    } \n  }\n  \n \n  const handleNameChange = (event) => {\n    console.log('value changed to: ', event.target.value)\n    setNewName(event.target.value)\n  }\n\n  const handleNumberChange = (event) => {\n    console.log('value changed to: ', event.target.value)\n    setNewNumber(event.target.value)\n  }\n\n  const handleFilterChange = (event) => {\n    console.log('value changed to: ', event.target.value)\n    setNewFilter(event.target.value)\n  }\n\n  const filteredContacts = (newFilter === '')\n    ? persons \n    : persons.filter(info => \n      info.name.toLowerCase().includes(newFilter.toLowerCase())\n      || info.number.includes(newFilter))\n  \n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notification} style={style} />\n      <Filter filter={newFilter} handler={handleFilterChange} />\n      <h2>Add new</h2>\n      <InfoForm \n        addName={addName} \n        newName={newName}\n        newNumber={newNumber}\n        nameHandler={handleNameChange}\n        numberHandler={handleNumberChange}\n      />\n      <h2>Numbers</h2>\n      <Numbers\n        contacts={filteredContacts} \n        setPersons={setPersons}\n        persons={persons}\n        setNotification={setNotification}\n        style={setStyle}\n      />\n\n    </div>\n  )\n}\n\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}